<?php
/**
 * @file
 * The textile module allows input of Textile shorthand.
 */

use Netcarver\Textile\Parser;

/**
 * Implements hook_filter_info().
 */
function textile_filter_info(): array {
  $filters['textile'] = array(
    'title' => t('Textile'),
    'description' => t('Allows content to be submitted using Textile, a simple, plain text syntax that is filtered into valid XHTML.'),
    'process callback' => '_textile_process',
    'settings callback' => '_textile_settings',
    'default settings' => array(
      'textile_tags' => FALSE,
    ),
    'cache' => FALSE, // added to ease testing of the filter
    'tips callback' => '_textile_filter_tips',
  );

  return $filters;
}

/**
 * Retrieves where the Textile library has been copied.
 *
 * @return string The path of the Textile library.
 *   The path of the Textile library.
 */
function textile_library_path(): string {
  // To do: confirm this works
  return backdrop_get_path('module', 'textile') . '/include';
}

/**
 * Filter tips callback for the Textile filter.
 */
function _textile_filter_tips($filter, $format, $long = FALSE) {
  if ($long) {
    module_load_include('inc', 'textile', 'textile.tips');
    return _textile_filter_long_tips();
  }
  elseif (isset($filter->settings['textile_tags']) && $filter->settings['textile_tags']) {
    return t('You can use Textile markup to format text between the <code>[textile]</code> and (optional) <code>[/textile]</code> tags.');
  }
  else {
    return t('You can use Textile markup to format text.');
  }
}

/**
 * Textile filter. Provides filtering of Textile tags into XHTML.
 * Helper function for textile_process().
 */
function _textile_match_process($matches) {
  static $textile = NULL;
  $path = textile_library_path();

  // Class Parser references other classes provided as separate files, although
  // they are not used by this module.
  if (is_null($textile) && $path) {
    require_once $path . '/DataBag.php';
    require_once $path . '/Parser.php';
    require_once $path . '/Tag.php';

    if (class_exists('\Netcarver\Textile\Parser')) {
      $textile = new Parser();
    }
  }
  return is_null($textile) ? $matches[1] : $textile->parse($matches[1]);
}

/**
 * Either sends the entire text field content for parsing, or identifies
 * sections marked with [textile] tags and sends the text inside the
 * tags for processing.
 */
function _textile_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  if ($filter->settings['textile_tags']) {
    return preg_replace_callback('{\[textile\](.*?)(\[\/textile\]|$)}is', '_textile_match_process', $text);
  }
  else {
    return _textile_match_process(array(NULL, $text));
  }
}

/**
 * Settings callback for the Textile filter.
 */
function _textile_settings($form, &$form_state, $filter, $format): array {
  $settings = array();

  $settings['textile_tags'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the tags [textile] and [/textile].'),
    '#default_value' => $filter->settings['textile_tags'],
    '#description' => t('If enabled, only text between [textile] and optional [/textile] tags will be processed; otherwise, all text will be processed as Textile markup.')
  );

  return $settings;
}
